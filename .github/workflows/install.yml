name: install

# 触发工作流的条件
on:
  push:
    tags:
      - "v*"  # 当推送以v开头的tag时触发
    branches:
      - "**"  # 当推送到任意分支时触发
    paths:    # 只有这些文件改动时才触发
      - ".github/workflows/install.yml"
      - "assets/**"
      - "**.py"
  pull_request:
    branches:
      - "**"  # PR提交到任意分支时触发
    paths:    # 只有这些文件改动时才触发
      - ".github/workflows/install.yml"
      - "assets/**"
      - "**.py"
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  meta:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4  # 检出代码
        with:
          fetch-depth: 0  # 获取完整历史记录以支持版本号生成
      - id: set_tag
        run: |
          # 判断是否是发布版本
          is_release=${{ startsWith(github.ref, 'refs/tags/v') }}
          # 获取当前tag
          tag=$(git describe --tags --match "v*" ${{ github.ref }} || true)
          if [[ $tag != v* ]]; then
            # 如果不是v开头的tag,尝试获取最新release的tag
            tag=$(curl -sX GET "https://api.github.com/repos/${{ github.repository }}/releases/latest" --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | awk '/tag_name/{print $4}' FS='["]')
            if [[ $tag != v* ]]; then
              # 如果还是获取不到,使用v0.0.0
              tag="v0.0.0"
            fi
            # 生成带日期和commit hash的tag
            tag=$(date "+$tag-%y%m%d-$(git rev-parse --short HEAD)")
          fi
          # 如果不是release版本,添加ci前缀
          if ! $($is_release) ; then
            prefix=${tag%-*-*}
            suffix=${tag#$prefix-}
            tag="$prefix-ci.$suffix"
          fi

          echo tag=$tag | tee -a $GITHUB_OUTPUT
          echo is_release=$is_release | tee -a $GITHUB_OUTPUT
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
      is_release: ${{ steps.set_tag.outputs.is_release }}

  install:
    needs: meta  # 依赖meta job的输出
    runs-on: macos-latest
    strategy:
      matrix:
        # 构建矩阵:不同系统和架构的组合
        os: [win, macos, linux, android]
        arch: [aarch64, x86_64]
      fail-fast: false  # 某个组合失败时继续其他组合

    steps:
      - uses: actions/checkout@v4  # 检出代码
        with:
          submodules: true  # 同时检出子模块

      - name: Setup Embed Python #下载python嵌入式版本
        if: matrix.os == 'win'
        shell: powershell
        run: |
          ./tools/ci/setup_embed_python.ps1

      - name: Download MaaFramework  # 下载MAA框架
        uses: robinraju/release-downloader@v1
        with:
          repository: MaaXYZ/MaaFramework
          fileName: "MAA-${{ matrix.os }}-${{ matrix.arch }}*"
          latest: true
          out-file-path: "deps"
          extract: true



      - name: Download MFAAvalonia  # 下载MFAAvalonia(Android除外)
        if: matrix.os != 'android'
        uses: robinraju/release-downloader@v1
        with:
          repository: SweetSmellFox/MFAAvalonia
          fileName: "MFAAvalonia-*-${{ (matrix.os == 'win' && 'win') || (matrix.os == 'macos' && 'osx') || (matrix.os == 'linux' && 'linux') }}-${{ (matrix.arch == 'x86_64' && 'x64') || (matrix.arch == 'aarch64' && 'arm64') }}*"
          latest: true
          out-file-path: "MFA"
          extract: true

      - name: Install  # 执行安装脚本
        shell: bash
        run: |
          python ./install.py ${{ needs.meta.outputs.tag }}

          # 非Android系统时复制MFA文件
          if [[ "${{ matrix.os }}" != "android" ]]; then
            if [ -d "MFA" ]; then
              echo "Copying MFA files to install directory..."
              mkdir -p install
              rsync -av --ignore-existing MFA/ install/
            else
              echo "MFA directory not found, skipping copy."
            fi
          else
            echo "Skipping copy MFA for Android."
          fi

      - uses: actions/upload-artifact@v4  # 上传构建产物
        with:
          name: MaaMNA-${{ matrix.os }}-${{ matrix.arch }}
          path: "install"

  release:
    if: ${{ needs.meta.outputs.is_release == 'true' }}  # 只在发布版本时执行
    needs: install  # 依赖install job完成
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4  # 下载所有构建产物
        with:
          path: assets

      - run: |  # 打包构建产物
          cd assets
          for f in *; do
            (cd $f && zip -r ../$f-${{ needs.meta.outputs.tag }}.zip .)
          done

      - uses: softprops/action-gh-release@v2  # 创建GitHub Release
        with:
          files: assets/*  # 上传所有zip文件
          tag_name: ${{ needs.meta.outputs.tag }}
          generate_release_notes: true  # 自动生成发布说明
